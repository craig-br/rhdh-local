services:
  # Uncomment the following block to use a PostgreSQL database
  # don't forget to also uncomment 'depends_on' 'db' section in the rhdh service
  # and commentout or delete 'database' section in the app-config.local.yaml

  db:
    container_name: db
    image: "registry.access.redhat.com/rhel8/postgresql-16:latest"
    volumes:
      - "/var/lib/pgsql/data"
    env_file:
      - path: "./.env"
        required: true
    environment:
      - POSTGRESQL_ADMIN_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - rhdh

  rhdh:
    container_name: rhdh
    image: ${RHDH_IMAGE}
    env_file:
      - path: "./.env"
        required: true
    user: "1001"
    entrypoint:
      - "/opt/app-root/src/wait-for-plugins.sh"
    ports:
      - "7007:7007"
    volumes:
      - type: bind
        source: "./wait-for-plugins.sh"
        target: "/opt/app-root/src/wait-for-plugins.sh"
        bind:
          selinux: "Z"
      - type: bind
        source: "./configs"
        target: "/opt/app-root/src/configs"
        bind:
          selinux: "Z"
      - type: volume
        source: dynamic-plugins-root
        target: /opt/app-root/src/dynamic-plugins-root
        volume:
          nocopy: true
    depends_on:
      install-dynamic-plugins:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    networks:
      - rhdh

  install-dynamic-plugins:
    container_name: rhdh-plugins-installer
    image: ${RHDH_IMAGE}
    # docker compose volumes are owned by root, so we need to run as root to write to them
    # the main rhdh container will be able to read from this as files are world readable
    user: "root"
    entrypoint:
      - ./fixes.sh
    env_file:
      - path: "./.env"
        required: true
    volumes:
      - type: bind
        source: "./fixes.sh"
        target: "/opt/app-root/src/fixes.sh"
        bind:
          selinux: "Z"
      - type: bind
        source : "./local-plugins"
        target: "/opt/app-root/src/local-plugins"
        bind:
          selinux: "Z"
      - type: bind
        source: "./configs"
        target: "/opt/app-root/src/configs"
        bind:
          selinux: "Z"
      - type: bind
        source: "./configs/dynamic-plugins.yaml"
        target: "/opt/app-root/src/dynamic-plugins.yaml"
        bind:
          selinux: "Z"
      - type: volume
        source: dynamic-plugins-root
        target: /dynamic-plugins-root
        volume:
          nocopy: true
    networks:
      - rhdh
    # depends_on:
    #   ansible-dev-tools-server:
    #     condition: service_completed_successfully

  ansible-dev-tools-server:
    container_name: ansible-devtools-server
    image: registry.redhat.io/ansible-automation-platform-25/ansible-dev-tools-rhel8:latest
    entrypoint:
      - adt
      - server
    env_file:
      - path: "./.env"
        required: true
    ports:
      - "8000:8000"
    networks:
      - rhdh
volumes:
  dynamic-plugins-root:
networks:
  rhdh: {}
